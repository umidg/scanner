{"version":3,"sources":["components/imageuploader.js","components/quagga.js","components/container.js","App.js","serviceWorker.js","index.js"],"names":["ImageUploader","props","useState","upImg","setUpImg","imgRef","useRef","previewCanvasRef","unit","width","aspect","crop","setCrop","completedCrop","setCompletedCrop","onLoad","useCallback","img","current","useEffect","console","log","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","setTransform","imageSmoothingEnabled","drawImage","x","y","style","textAlign","type","accept","onChange","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","src","onImageLoaded","c","onComplete","margin","display","justifyContent","ref","onClick","imgCropped","Scanner","getCanv","a","Quagga","decodeSingle","locator","halfSample","patchSize","decoder","readers","locate","mydata","fromCanvas","callme","hasOwnProperty","barcode","codeResult","code","set","setState","imgUrl","doOCR","text","worker","createWorker","logger","m","load","loadLanguage","initialize","recognize","data","terminate","state","undefined","this","className","fontWeight","Component","Conatiner","setImg","uploaded","setUploaded","previewRef","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a55410f.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\n\r\nconst pixelRatio = 4;\r\n\r\nconst getResizedCanvas = (canvas, newWidth, newHeight) => {\r\n  const tmpCanvas = document.createElement(\"canvas\");\r\n  tmpCanvas.width = newWidth;\r\n  tmpCanvas.height = newHeight;\r\n\r\n  const ctx = tmpCanvas.getContext(\"2d\");\r\n  ctx.drawImage(\r\n    canvas,\r\n    0,\r\n    0,\r\n    canvas.width,\r\n    canvas.height,\r\n    0,\r\n    0,\r\n    newWidth,\r\n    newHeight\r\n  );\r\n\r\n  return tmpCanvas;\r\n};\r\n\r\nconst ImageUploader = (props) => {\r\n  const [upImg, setUpImg] = useState();\r\n  const imgRef = useRef(null);\r\n  const previewCanvasRef = useRef(null);\r\n  const [crop, setCrop] = useState({ unit: \"%\", width: 30, aspect: 16 / 9 });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n\r\n  const onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onLoad = useCallback((img) => {\r\n    imgRef.current = img;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n    console.log(previewCanvasRef, \"preview\");\r\n    const image = imgRef.current;\r\n    const canvas = previewCanvasRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingEnabled = false;\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n    console.log(previewCanvasRef, \"ploader\");\r\n  }, [completedCrop]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h2>Barcode and text scanner</h2>\r\n        <div>\r\n          <h4>Please upload an image </h4>\r\n          <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\r\n        </div>\r\n      </div>\r\n\r\n      <ReactCrop\r\n        src={upImg}\r\n        onImageLoaded={onLoad}\r\n        crop={crop}\r\n        onChange={(c) => setCrop(c)}\r\n        onComplete={(c) => {\r\n          setCompletedCrop(c);\r\n        }}\r\n        style={{ width: \"60%\", height: \"60%\", margin: \"5% 20% 0 20%\" }}\r\n      />\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <canvas\r\n          ref={previewCanvasRef}\r\n          style={{\r\n            width: completedCrop?.width ?? 0,\r\n            height: completedCrop?.height ?? 0,\r\n          }}\r\n        />\r\n      </div>\r\n      {/* {console.log(previewCanvasRef)} */}\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        {completedCrop ? (\r\n          <button\r\n            style={{ margin: \"5vh\" }}\r\n            onClick={() => props.imgCropped(previewCanvasRef)}\r\n          >\r\n            Scan\r\n          </button>\r\n        ) : (\r\n          <p></p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n","import React, { Component } from \"react\";\r\nimport Quagga from \"quagga\";\r\nimport { createWorker } from \"tesseract.js\";\r\nimport mydata from \"data-url-canvas\";\r\n\r\nclass Scanner extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imgUrl: \"\",\r\n      barcode: \"\",\r\n      text: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (\r\n      props.img.current.current != undefined ||\r\n      props.img.current.current != null\r\n    ) {\r\n      this.getCanv(props.img);\r\n    }\r\n  }\r\n\r\n  getCanv = async (img) => {\r\n    let barcode;\r\n    // console.log(mydata.fromCanvas(img.current.current), \"url\");\r\n    Quagga.decodeSingle(\r\n      {\r\n        locator: {\r\n          halfSample: true,\r\n          patchSize: \"small\",\r\n        },\r\n        decoder: {\r\n          readers: [\r\n            \"code_128_reader\",\r\n            \"code_39_reader\",\r\n            \"code_93_reader\",\r\n            \"i2of5_reader\",\r\n            \"code_39_vin_reader\",\r\n            \"ean_reader\",\r\n            \"upc_reader\",\r\n            \"upc_e_reader\",\r\n          ], // List of active readers\r\n        },\r\n        locate: true, // try to locate the barcode in the image\r\n        src: mydata.fromCanvas(img.current.current), // or 'data:image/jpg;base64,' + data\r\n      },\r\n      function (callme) {\r\n        if (callme && callme.hasOwnProperty(\"codeResult\")) {\r\n          barcode = callme.codeResult.code;\r\n          set();\r\n        } else {\r\n          barcode = \"Couldn't find barcode. Image not clear enough.\";\r\n          set();\r\n        }\r\n      }\r\n    );\r\n    let set = () => {\r\n      this.setState({\r\n        imgUrl: mydata.fromCanvas(img.current.current),\r\n        barcode: barcode,\r\n      });\r\n      // console.log(this.state, \"callme\");\r\n    };\r\n\r\n    this.doOCR(mydata.fromCanvas(img.current.current));\r\n  };\r\n\r\n  doOCR = async (img) => {\r\n    // console.log(\"ready\");\r\n    this.setState({ text: \"Please wait\" });\r\n    const worker = createWorker({\r\n      logger: (m) => console.log(m),\r\n    });\r\n    await worker.load();\r\n    await worker.loadLanguage(\"eng\");\r\n    await worker.initialize(\"eng\");\r\n    const {\r\n      data: { text },\r\n    } = await worker.recognize(img);\r\n    // console.log(text, \"text\");\r\n    if (text != \"\") this.setState({ text: text });\r\n    else\r\n      this.setState({\r\n        text: \"Couldn't find any text. Image not clear enough.\",\r\n      });\r\n    await worker.terminate();\r\n  };\r\n  render() {\r\n    // console.log(this.state);\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div className=\"card\">\r\n            {this.state.barcode && (\r\n              <p>\r\n                <span style={{ fontWeight: \"800\" }}>Barcode:</span>{\" \"}\r\n                {this.state.barcode}\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"card\">\r\n            {this.state.text && (\r\n              <p>\r\n                <span style={{ fontWeight: \"800\" }}>Text:</span>{\" \"}\r\n                {this.state.text}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scanner;\r\n","import { Quagga } from \"quagga\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport ImageUploader from \"./imageuploader\";\r\nimport QuaggaComponent from \"./quagga\";\r\nconst Conatiner = () => {\r\n  const [img, setImg] = useState(null);\r\n  const imgRef = useRef(null);\r\n  const [uploaded, setUploaded] = useState(true);\r\n  const imgCropped = (previewRef) => {\r\n    imgRef.current = previewRef;\r\n    setImg(previewRef);\r\n    setUploaded(!uploaded);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"changed\");\r\n  }, [uploaded, img]);\r\n\r\n  return (\r\n    <>\r\n      <ImageUploader imgCropped={imgCropped} />\r\n      <QuaggaComponent img={imgRef} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Conatiner;\r\n","import React from \"react\";\nimport Conatiner from \"./components/container\";\nimport ImageComponent from \"./components/imageuploader\";\nimport Scanner from \"./components/quagga\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <ImageComponent /> */}\n      {/* <Scanner /> */}\n      <Conatiner />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}